// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ApiTemplate.Persistence.Context;

#nullable disable

namespace ApiTemplate.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231122185925_AddOnboardingEntities")]
    partial class AddOnboardingEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiTemplate.Domain.Entities.BusinessStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("BusinessStructure", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaneCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("AgreesTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuthorizesFinancialInformation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BusinessStructureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CiiuCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DianGreatContributor")
                        .HasColumnType("bit");

                    b.Property<string>("DianGreatContributorRes")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Document")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EInvoiceAccountingCloseDay")
                        .HasColumnType("int");

                    b.Property<string>("EInvoiceEmail")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("EInvoiceFullName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("EInvoicePhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("HasPepRelative")
                        .HasColumnType("bit");

                    b.Property<string>("IcaActivity")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool?>("IcaAutoRetainer")
                        .HasColumnType("bit");

                    b.Property<string>("IcaAutoRetainerRes")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("IncomeSelfRetainer")
                        .HasColumnType("bit");

                    b.Property<string>("IncomeSelfRetainerRes")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("LastOnboardingStep")
                        .HasColumnType("int");

                    b.Property<string>("LegalName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LegalRepresentativeDocument")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("LegalRepresentativeDocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LegalRepresentativeEmail")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("LegalRepresentativeFirstName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LegalRepresentativeLastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("LegalType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("PersonType")
                        .HasColumnType("int");

                    b.Property<int?>("Regime")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegistrationSignedFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("RequiredToDeclareIncome")
                        .HasColumnType("bit");

                    b.Property<bool?>("RetentionSubject")
                        .HasColumnType("bit");

                    b.Property<bool?>("SalesRetentionAgent")
                        .HasColumnType("bit");

                    b.Property<string>("SalesRetentionAgentRes")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SignOnboardingToken")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<bool?>("UnderOath")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UsesPurchaseOrder")
                        .HasColumnType("bit");

                    b.Property<bool?>("VatResponsible")
                        .HasColumnType("bit");

                    b.Property<string>("VerificationDigit")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessStructureId");

                    b.HasIndex("CityId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("LegalRepresentativeDocumentTypeId");

                    b.HasIndex("RegistrationSignedFileId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyAssociate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<int>("ParticipationPercent")
                        .HasColumnType("int");

                    b.Property<bool>("Pep")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("CompanyAssociate", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Name")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Type")
                        .IsUnique();

                    b.ToTable("CompanyContact", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("MaxQuantity")
                        .HasColumnType("smallint");

                    b.Property<short>("MinQuantity")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompanyDocument", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyDocumentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDocumentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FileId");

                    b.ToTable("CompanyDocumentFile", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CompanyId", "UserId")
                        .IsUnique();

                    b.ToTable("CompanyUser", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyUserPermission", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyUserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("CompanyUserPermission", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.ContextualDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Version")
                        .IsUnique();

                    b.ToTable("ContextualDocument", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CostCenter", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CostCenterUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CostCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("CostCenterId");

                    b.ToTable("CostCenterUser", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrail", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.BlacklistedToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlacklistedToken", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.LoginAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginAttempt", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecoveryCode")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("RecoveryExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.SignedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("SignedFile", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.SignedFileSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Client")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SignedFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("SignedFileId");

                    b.ToTable("SignedFileSignature", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaneCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.BusinessStructure", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Country", "Country")
                        .WithMany("BusinessStructures")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.City", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Company", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.BusinessStructure", "BusinessStructure")
                        .WithMany("Companies")
                        .HasForeignKey("BusinessStructureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ApiTemplate.Domain.Entities.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ApiTemplate.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Companies")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ApiTemplate.Domain.Entities.DocumentType", "LegalRepresentativeDocumentType")
                        .WithMany("LegalRepresentativeCompanies")
                        .HasForeignKey("LegalRepresentativeDocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ApiTemplate.Domain.Entities.SignedFile", "RegistrationSignedFile")
                        .WithMany("RegistrationSignedCompanies")
                        .HasForeignKey("RegistrationSignedFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BusinessStructure");

                    b.Navigation("City");

                    b.Navigation("DocumentType");

                    b.Navigation("LegalRepresentativeDocumentType");

                    b.Navigation("RegistrationSignedFile");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyAssociate", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Company", "Company")
                        .WithMany("CompanyAssociates")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("CompanyAssociates")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyContact", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Company", "Company")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyDocumentFile", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.CompanyDocument", "CompanyDocument")
                        .WithMany("CompanyDocumentsFiles")
                        .HasForeignKey("CompanyDocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.Company", "Company")
                        .WithMany("CompanyDocumentsFiles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.File", "File")
                        .WithMany("CompanyDocumentsFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyDocument");

                    b.Navigation("File");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyUser", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.Identity.User", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyUserPermission", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.CompanyUser", "CompanyUser")
                        .WithMany("CompanyUserPermissions")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.Identity.Permission", "Permission")
                        .WithMany("CompanyUserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CostCenter", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Company", "Company")
                        .WithMany("CostCenters")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CostCenterUser", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.CompanyUser", "CompanyUser")
                        .WithMany("CostCenterUsers")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany("CostCenterUsers")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("CostCenter");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.AuditTrail", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Identity.User", "User")
                        .WithMany("AuditTrails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.BlacklistedToken", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Identity.User", "User")
                        .WithMany("BlacklistedTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.LoginAttempt", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Identity.User", "User")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.RolePermission", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Identity.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.Identity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.SignedFile", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.File", "File")
                        .WithMany("SignedFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.SignedFileSignature", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("SignedFileSignatures")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApiTemplate.Domain.Entities.SignedFile", "SignedFile")
                        .WithMany("SignedFileSignatures")
                        .HasForeignKey("SignedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("SignedFile");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.State", b =>
                {
                    b.HasOne("ApiTemplate.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.BusinessStructure", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.City", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Company", b =>
                {
                    b.Navigation("CompanyAssociates");

                    b.Navigation("CompanyContacts");

                    b.Navigation("CompanyDocumentsFiles");

                    b.Navigation("CompanyUsers");

                    b.Navigation("CostCenters");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyDocument", b =>
                {
                    b.Navigation("CompanyDocumentsFiles");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CompanyUser", b =>
                {
                    b.Navigation("CompanyUserPermissions");

                    b.Navigation("CostCenterUsers");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.CostCenter", b =>
                {
                    b.Navigation("CostCenterUsers");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Country", b =>
                {
                    b.Navigation("BusinessStructures");

                    b.Navigation("States");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("CompanyAssociates");

                    b.Navigation("LegalRepresentativeCompanies");

                    b.Navigation("SignedFileSignatures");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.File", b =>
                {
                    b.Navigation("CompanyDocumentsFiles");

                    b.Navigation("SignedFiles");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.Permission", b =>
                {
                    b.Navigation("CompanyUserPermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("AuditTrails");

                    b.Navigation("BlacklistedTokens");

                    b.Navigation("CompanyUsers");

                    b.Navigation("LoginAttempts");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.SignedFile", b =>
                {
                    b.Navigation("RegistrationSignedCompanies");

                    b.Navigation("SignedFileSignatures");
                });

            modelBuilder.Entity("ApiTemplate.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
